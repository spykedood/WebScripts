var Cell = {

//a=Location ie (.mainwindow .mylists) or ('a').
//b=Row number (just pass through variable "a" from loop!).
//c=Either ".coinformat" or "".
//d=td nth child number.
//e=to fixed number (4/6)
Cellvalue: function(a, b, c, d, e) {
    var cellvalue = $(a, 'tr:nth-child(' + b + ')', ' td' + c + ':nth-child(' + d + ')').text();
    cellvalue = cellvalue.replace(",", "");
    cellvalue = (parseFloat(cellvalue)).toFixed(e);
    return cellvalue;
}

//a=Location ie (.mainwindow .mylists) or ('a').
//b=Row number (just pass through variable "a" from loop!).
//c=Either ".coinformat" or "".
//d=td nth child number.
getCell: function(a, b, c, d) {
    var cell = $(a, 'tr:nth-child(' + b + ')', ' td' + c + ':nth-child(' + d + ')')[0];
    return cell;
}

Colours: function(a, b, c, d) {
    if ((b >= c[0]) && (b < c[1])) {
        $(a).css({ "background-color": d[0] });
        //alert(b + ' '+ c[0] + ' '+ c[1]);
    } else if ((b >= c[1]) && (b < c[2])) {
        $(a).css({ "background-color": d[1] });
        //alert(b + ' '+ c[1] + ' '+ c[2]);
    } else if ((b >= c[2]) && (b < c[3])) {
        $(a).css({ "background-color": d[2] });
        //alert(b + ' '+ c[2] + ' '+ c[3]);
    } else if ((b >= c[3]) && (b < c[4])) {
        $(a).css({ "background-color": d[3] });
        //alert(b + ' '+ c[3] + ' '+ c[4]);
    } else if ((b >= c[4]) && (b < c[5])) {
        $(a).css({ "background-color": d[4] });
        //alert(b + ' '+ c[4] + ' '+ c[5]);
    } else if (b >= c[5]) {
        $(a).css({ "background-color": d[5] });
        //alert(b + ' '+ c[5]);
    } else {
        //alert('derp');
    }
}

recBuySell: function(text, cell) {
    if (text === "Buy") {
        $(cell).css({ "background-color": "#006600" });
    } else {
        $(cell).css({ "background-color": "#B80000" });
    }
}

}

Cell.Cellvalue(a, b, c, d, e);
Cell.getCell(a, b, c, d);

Cell.Colours(buycolour, pctDiffbuy, pctDiffArr, BuyGradient);
Cell.Colours(sellcolour, pctDiffsell, pctDiffArr, SellGradient);
        //
Cell.Colours(buyqtycell, btcbuyqty, btcQtyArr, QtyGradient);
Cell.Colours(sellqtycell, btcsellqty, btcQtyArr, QtyGradient);
Cell.Colours(recentqtycell, btcrecqty, btcQtyArr, QtyGradient);
        //
Cell.Colours(btcSellQtyCell, btcsellqty, btcQtyArr, QtyGradient);
Cell.Colours(btcBuyQtyCell, btcbuyqty, btcQtyArr, QtyGradient);
Cell.Colours(btcRecQtyCell, btcrecqty, btcQtyArr, QtyGradient);

Cell.recBuySell(recentOrdVal, recentOrdCell);
